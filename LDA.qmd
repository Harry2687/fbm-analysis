---
title: "Latent Dirichlet Allocation"
format: html
---

```{python}
import modules.preprocessing as prep
import modules.lda.preprocessing as lda_prep
import modules.lda.models as lda_models
import gensim as gs
```

Import and clean data.

```{python}
chat_data = prep.ms_import_data('data/the_office')
chat_data = lda_prep.lda_preprocess(chat_data, 'content', 'clean_content')
```

```{python}
top_words = lda_prep.top_words(chat_data).head(50)
top_words
```

Count number of occurances of specified word by sender.

```{python}
chat_data_with_stopwords = prep.ms_import_data('data/the_office')
chat_data_with_stopwords = lda_prep.lda_preprocess(chat_data_with_stopwords, 'content', 'clean_content', False)
word_count = prep.sender_wordcount(chat_data_with_stopwords, 'coc')
word_count
```

Split messages into conversations which are separated by at least 10 minutes.

```{python}
documents = lda_prep.lda_getdocs(chat_data, 'clean_content', 'timestamp')
```

Run LDA, where documents are the previously defined conversations.

```{python}
model = lda_models.fbm_lda(documents)
model.train_lda(7)
model.print_topics(10)
```

```{python}
model.get_coherence()
```

```{python}
import pandas as pd

class topic_plotter(lda_models.fbm_lda):
    def plot(self):
        document_topics = self.lda_model.get_document_topics(self.corpus, minimum_probability=0)
        topic_dist_df = pd.DataFrame(document_topics)
        topic_dist_df = topic_dist_df.map(lambda x: x[1])
        plot = (
            topic_dist_df
            .plot(kind='bar', stacked=True, xticks=[])
            .legend(bbox_to_anchor=(1, 1))
        )
        return plot


plotter = topic_plotter(documents)
plotter.train_lda(7)
plotter.plot()
```

Hyperparameter tuning

```{python}
tuning = lda_models.tune_lda(documents)
tuning_results = tuning.tune(2, 20, 1, show_progress=True)
```